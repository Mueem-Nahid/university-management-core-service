// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  student               Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semester")
}

model AcademicFaculty {
  id                 String               @id @default(uuid())
  title              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  academicDepartment AcademicDepartment[]
  student            Student[]
  faculty            Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyID], references: [id])
  academicFacultyID String
  student           Student[]
  faculty           Faculty[]
  offeredCourses    OfferedCourse[]

  @@map("academic_department")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty              AcademicFaculty               @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId            String
  studentSemesterRegistrations StudentSemesterRegistration[]

  @@map("student")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty            AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId          String
  courses                    CourseFaculty[]
  offeredCourseClassSchedule OfferedCourseClassSchedule[]

  @@map("faculty")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room[]

  @@map("building")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  building                   Building                     @relation(fields: [buildingId], references: [id])
  buildingId                 String
  offeredCourseClassSchedule OfferedCourseClassSchedule[]

  @@map("room")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  prerequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite")
  prerequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  faculties       CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@map("course")
}

model CourseToPrerequisite {
  courseId       String
  prerequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  prerequisite Course @relation(fields: [prerequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, prerequisiteId])
  @@map("course_to_prerequisite")
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculty")
}

model SemesterRegistration {
  id                           String                        @id @default(uuid())
  startDate                    DateTime
  endDate                      DateTime
  status                       SemesterRegistrationStatus?   @default(UPCOMING)
  minCredit                    Int                           @default(0)
  maxCredit                    Int                           @default(0)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  academicSemesterId           String
  academicSemester             AcademicSemester              @relation(fields: [academicSemesterId], references: [id])
  offeredCourses               OfferedCourse[]
  offeredCourseSections        OfferedCourseSection[]
  offeredCourseClassSchedule   OfferedCourseClassSchedule[]
  studentSemesterRegistrations StudentSemesterRegistration[]

  @@map("semester_registration")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String   @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  offeredCourseId String
  offeredCourse   OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId     String
  semesterRegistration       SemesterRegistration         @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedule OfferedCourseClassSchedule[]

  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
  id        String   @id @default(uuid())
  startTime String
  endTime   String
  dayOfWeek WeekDays @default(SATURDAY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedule")
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model StudentSemesterRegistration {
  id                String   @id @default(uuid())
  isConfirmed       Boolean? @default(false)
  totalCreditsTaken Int?     @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registrations")
}
